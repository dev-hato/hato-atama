---
name: update-go-runtime

on:
  schedule:
    - cron: '* 21 * * *' # 06:00 JST

jobs:
  # App Engineランタイムのページをスクレイピングし、そこに記述されているGoランタイムのバージョンがアップデートされていたらapp.yamlをアップデートする
  update-go-runtime:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3.3.0
        with:
          node-version-file: .node-version
          cache: npm
      - run: |
          npm_version=$(grep \"npm\" package.json \
                        | sed -e 's/ *"npm": "^\(.*\)"/\1/g')
          npm install --prefer-offline --location=global "npm@${npm_version}"
          npm ci --prefer-offline
      - name: Get latest App Engine support version
        id: get_latest_app_engine_support_version
        uses: actions/github-script@v6.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const axios = require('axios')
            const cheerio = require('cheerio')
            const {Text} = require('domhandler')

            const response = await axios.get('https://cloud.google.com/appengine/docs/standard/go/runtime')
            const $ = cheerio.load(response.data)
            const versions = []

            for (const element of $('code[dir="ltr"]').get()) {
              const textElement = element.children[0]
              if (textElement instanceof Text) {
                const textElementData = textElement.data.trim()
                if (textElementData.startsWith('runtime')) {
                  versions.push(textElementData)
                }
              }
            }

            versions.sort()
            return versions.pop()
      - run: sed -i -e 's/runtime:.*/${{steps.get_latest_app_engine_support_version.outputs.result}}/g' app.yaml
      # 差分があったときは差分を出力する
      - name: Show diff
        id: diff
        run: |
          result=$(git diff)
          echo "::set-output name=result::$result"
      - run: |
          REPO_NAME="dev-hato/hato-atama"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
      # 差分があったときは、コミットを作りpushする
      - name: Push
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        run: |
          git config user.name "github-actions[bot]"
          EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git config user.email "${EMAIL}"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          REPO_URL="https://"
          REPO_URL+="${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/"
          REPO_URL+="${{github.repository}}.git"
          GITHUB_HEAD="HEAD:refs/heads/update-go-runtime"
          git push -f "${REPO_URL}" "${GITHUB_HEAD}"
      - name: Set org name
        uses: actions/github-script@v6.1.0
        if: env.REPO_NAME == github.repository
        id: set_org_name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: return process.env.GITHUB_REPOSITORY.split('/')[0]
      - name: Get PullRequests
        uses: actions/github-script@v6.1.0
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:update-go-runtime",
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v6.1.0
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            let title = "App EngineのGoランタイムのバージョンを直してあげたよ！PRをマージしてね！"
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:update-go-runtime",
              base: HEAD_REF,
              title,
              body: "鳩の唐揚げおいしい！😋😋😋"
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = await github.rest.pulls.create(
                                      pulls_create_params
                                    )
            return create_pull_res.data.number
      # 既にPRがある状態で、手動でを正した場合、PRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v6.1.0
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result == '' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const head_name = "update-go-runtime"
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "${{steps.set_org_name.outputs.result}}:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)

            for (const pull of pulls) {
              const pulls_update_params = {
                pull_number: pull.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:", pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.diff.outputs.result != '' }}
        run: exit 1
