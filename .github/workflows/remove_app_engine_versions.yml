---
name: remove-app-engine-versions

on:
  pull_request:
    types:
      - closed

jobs:
  remove-app-engine-versions:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get run numbers
        uses: actions/github-script@v5
        id: get_run_numbers
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const running = 'running'
            const retry_count = 10
            let result

            for (let i = 0; i < retry_count; i++) {
              console.log("call actions.listRepoWorkflows:", common_params)
              let workflows = await github.paginate(
                                github.rest.actions.listRepoWorkflows,
                                common_params
                              )
              workflows = workflows.filter(w => w.name === 'release')
              const run_numbers = await Promise.all(workflows.map(async w => {
                const list_workflow_runs_params = {
                  workflow_id: w.id,
                  branch: HEAD_REF,
                  ...common_params
                }
                console.log("call actions.listWorkflowRuns:")
                console.log(list_workflow_runs_params)
                const runs = await github.paginate(
                               github.rest.actions.listWorkflowRuns,
                               list_workflow_runs_params
                             )
                return runs.map(run => {
                  if (run.status !== 'completed') {
                    return running
                  }

                  return `v${run.run_number}`
                })
              }))
              result = run_numbers.flat().filter(Boolean)

              if (!result.includes(running) || i === retry_count - 1) {
                break
              }

              // 完了していないrunがあった場合はリトライ
              // sleepする時間は exponential backoff and jitter で算出している
              // 参考: https://aws.typepad.com/sajp/2015/03/backoff.html
              const sleep_seconds = Math.random() * (Math.pow(2, i + 1) * 100)
              console.log(`sleep ${sleep_seconds}s`)
              await new Promise(r => setTimeout(r, sleep_seconds * 1000))
            }

            if (result.includes(running)) {
              core.setFailed('There are running runs.')
            }

            return result.join(' ')
      - uses: google-github-actions/setup-gcloud@v0.5.0
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        with:
          project_id: 'hato-atama'
      - id: 'auth'
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.6.0
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/765091727073/locations/global/workloadIdentityPools/hato-atama-workload-identity/providers/github'
          service_account: 'actions-deploy@hato-atama.iam.gserviceaccount.com'
      - id: login_to_gcp
        name: 'Login to GCP'
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        run: |
          FILE_PATH="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth login --brief --cred-file="${FILE_PATH}"
      - if: ${{ steps.get_run_numbers.outputs.result != '' }}
        run: |
          NUMBER="${{steps.get_run_numbers.outputs.result}}"
          gcloud app versions delete --service=default "${NUMBER}"
