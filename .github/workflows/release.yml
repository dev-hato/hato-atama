name: release

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v2
      - name: Get Node.js version
        id: get_node_version
        run: |
          node_version=$(cat .node-version)
          echo "Node.js version:" "${node_version}"
          echo "::set-output name=node_version::${node_version}"
      - uses: actions/setup-node@v2
        with:
          node-version: ${{steps.get_node_version.outputs.node_version}}
      - name: Cache node modules frontend
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-frontend-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            npm-cache-frontend-
      - name: npm install
        run: npm install
      - name: build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: frontend/dist

  deploy-app-engine:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: frontend
          path: frontend/dist
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"v${GITHUB_RUN_NUMBER}\"" >> app.yaml'
        if: ${{ github.event_name == 'pull_request' }}
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"prd\"" >> app.yaml'
        if: ${{ github.event_name == 'push' }}
      - name: Deploy to App Engine
        uses: google-github-actions/deploy-appengine@v0.4.0
        with:
          deliverables: app.yaml
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials: ${{ secrets.GCP_SA_KEY }}
          promote: false
          version: "v${{github.run_number}}"

  create-pr-environment:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/github-script@v4.1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "${{github.event.pull_request.head.sha}} のPR用環境: <a href=\"https://v" + process.env.GITHUB_RUN_NUMBER + "-dot-hato-atama.an.r.appspot.com\">サイト</a>, <a href=\"https://console.cloud.google.com/logs/query;query=resource.type%3D%22gae_app%22%20resource.labels.module_id%3D%22default%22%20resource.labels.version_id%3D%22v" + process.env.GITHUB_RUN_NUMBER + "%22?project=hato-atama\">ログ</a>"
            })

  e2e-test-mini-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    strategy:
      matrix:
        browser: [ "chrome", "chromium", "firefox", "electron" ]
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: docker-compose -f staging.docker-compose.yml build
      - run: docker-compose -f staging.docker-compose.yml up -d
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles('**/test/e2e/package-lock.json') }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=http://localhost:8080/ --spec cypress/integration/mini/*.js --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-all-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    strategy:
      matrix:
        browser: [ "chrome", "chromium", "firefox", "electron" ]
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: docker-compose -f staging.docker-compose.yml build
      - run: docker-compose -f staging.docker-compose.yml up -d
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles('**/test/e2e/package-lock.json') }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=http://localhost:8080/ --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-mini-prd:
    runs-on: ubuntu-latest
    needs:
      - deploy-app-engine
      - e2e-test-mini-docker-compose
    strategy:
      matrix:
        browser: [ "chrome", "chromium", "firefox", "electron" ]
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles('**/test/e2e/package-lock.json') }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env "API_HOST=https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com" --spec cypress/integration/mini/*.js --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-all-prd:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-docker-compose
      - e2e-test-mini-prd
    strategy:
      matrix:
        browser: [ "chrome", "chromium", "firefox", "electron" ]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles('**/test/e2e/package-lock.json') }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env "API_HOST=https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com" --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  docker-compose-build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: docker-compose -f staging.docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1
      - run: docker-compose -f staging.docker-compose.yml push

  migrating-traffic:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-prd
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - run: gcloud app services set-traffic default --splits "v${GITHUB_RUN_NUMBER}=1"

  remove-app-engine-past-versions:
    runs-on: ubuntu-latest
    needs:
      - migrating-traffic
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get run numbers
        uses: actions/github-script@v4.1
        id: get_run_numbers
        env:
          HEAD_REF: master
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const running = 'running'
            const retry_count = 10
            let result

            for (let i = 0; i < retry_count; i++) {
              console.log("call actions.listRepoWorkflows:", common_params)
              const workflows = await github.paginate(github.actions.listRepoWorkflows, common_params)
              const run_numbers = await Promise.all(workflows.workflows.filter(workflow => workflow.name === 'release').map(async workflow => {
                const list_workflow_runs_params = {
                  workflow_id: workflow.id,
                  branch: HEAD_REF,
                  ...common_params
                }
                console.log("call actions.listWorkflowRuns:", list_workflow_runs_params)
                const runs = await github.paginate(github.actions.listWorkflowRuns, list_workflow_runs_params)
                return runs.workflow_runs.filter(run => run.run_number < ${{github.run_number}}).map(run => {
                  if (run.status !== 'completed') {
                    return running
                  }

                  return run.run_number
                })
              }))
              result = run_numbers.flat().filter(Boolean)

              if (!result.includes(running) || i === retry_count - 1) {
                break
              }

              // 完了していないrunがあった場合はリトライ
              // sleepする時間は exponential backoff and jitter で算出している
              // 参考: https://aws.typepad.com/sajp/2015/03/backoff.html
              const sleep_seconds = Math.random() * (Math.pow(2, i + 1) * 100)
              console.log(`sleep ${sleep_seconds}s`)
              await new Promise(r => setTimeout(r, sleep_seconds * 1000))
            }

            if (result.includes(running)) {
              core.setFailed('There are running runs.')
            }

            return result
      - name: Remove app engine versions
        run: |
          for run_number in $(echo "${{steps.get_run_numbers.outputs.result}}" | jq ".[]"); do
            gcloud app versions delete --service=default "v${run_number}"
          done

  pr-test-complete-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - create-pr-environment
      - e2e-test-mini-prd
      - e2e-test-all-docker-compose
      - docker-compose-build
    steps:
      - run: exit 0

  pr-test-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs:
      - pr-test-complete-check
    steps:
      - if: ${{ needs.pr-test-complete-check.result == 'success' }}
        run: exit 0
      - if: ${{ needs.pr-test-complete-check.result != 'success' }}
        run: exit 1

  release-complete-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - remove-app-engine-past-versions
      - docker-compose-build
    steps:
      - run: exit 0

  release-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'push' }}
    needs:
      - release-complete-check
    steps:
      - if: ${{ needs.release-complete-check.result == 'success' }}
        run: exit 0
      - if: ${{ needs.release-complete-check.result != 'success' }}
        run: exit 1
