---
name: release

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  check_bot:
    runs-on: ubuntu-latest
    steps:
      - name: Check bot
        run: |
          if [ "${{github.actor}}" = "dependabot[bot]" ]; then
            exit 1
          fi

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    needs: check_bot
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.5.1
        with:
          node-version-file: frontend/.node-version
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: npm install
        run: npm install
      - name: build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: frontend/dist

  deploy-app-engine:
    runs-on: ubuntu-latest
    needs: build-frontend
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: frontend
          path: frontend/dist
      - run: |
          echo -e "env_variables:\n" > app.yaml
          echo -e "  ENV_NAME: \"v${GITHUB_RUN_NUMBER}\"" >> app.yaml
        if: ${{ github.event_name == 'pull_request' }}
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"prd\"" >> app.yaml'
        if: ${{ github.event_name == 'push' }}
      - uses: google-github-actions/setup-gcloud@v0.4.0
        with:
          project_id: 'hato-atama'
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.5.0
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/765091727073/locations/global/workloadIdentityPools/hato-atama-workload-identity/providers/github'
          service_account: 'actions-deploy@hato-atama.iam.gserviceaccount.com'
      - id: login_to_gcp
        name: 'Login to GCP'
        run: |
          FILE_PATH="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth login --brief --cred-file="${FILE_PATH}"
      - name: Deploy to App Engine
        uses: google-github-actions/deploy-appengine@v0.5.0
        with:
          deliverables: app.yaml
          project_id: hato-atama
          promote: false
          version: "v${{github.run_number}}"
      - name: Wait for the deployment to complete
        run: |
          ARGS="v${{github.run_number}}"
          ARGS+="--service 'default' --format 'value(servingStatus)'"
          
          # 最大10分待つ
          for i in $(seq 600); do
            serving_status=$(gcloud app versions describe "${ARGS}")
            echo "${i}: servingStatus: ${serving_status}"
          
            if [ "${serving_status}" = "SERVING" ]; then
              exit 0
            fi
          
            sleep 1
          done
          
          exit 1


  create-pr-environment:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{github.event.pull_request.head.sha}} のPR用環境:"
            body += " <a href=\"https://v" + process.env.GITHUB_RUN_NUMBER
            body += "-dot-hato-atama.an.r.appspot.com\">サイト</a>,"
            body += " <a href=\"https://console.cloud.google.com/logs/query;"
            body += "query=resource.type%3D%22gae_app"
            body += "%22%20resource.labels.module_id%3D%22default"
            body += "%22%20resource.labels.version_id%3D%22v"
            body += process.env.GITHUB_RUN_NUMBER
            body += "%22?project=hato-atama\">ログ</a>"
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            })

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    steps:
      - uses: actions/checkout@v2
      - run: |
          ARTIFACT_PATH="${{ github.workspace }}/tmp/artifacts"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> "$GITHUB_ENV"
          URLS="https://"
          URLS+="v${{ github.run_number }}-dot-hato-atama.an.r.appspot.com"
          echo "URLS=${URLS}" >> "${GITHUB_ENV}"
      - run: mkdir -p "${ARTIFACT_PATH}"
      - uses: foo-software/lighthouse-check-action@v7.1.1
        with:
          gitHubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          urls: ${{ env.URLS }}
          outputDirectory: ${{ env.ARTIFACT_PATH }}
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: Lighthouse reports
          path: ${{ env.ARTIFACT_PATH }}

  e2e-test-mini-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    needs: check_bot
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: docker-compose -f staging.docker-compose.yml build
      - run: docker-compose -f staging.docker-compose.yml up -d
      - run: |
          FILE_PATH="**/test/e2e/package-lock.json"
          echo "FILE_PATH=${FILE_PATH}" >> "${GITHUB_ENV}"
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles(env.FILE_PATH) }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: |
          ENV="--env API_HOST=http://localhost:8080/"
          SPEC="--spec cypress/integration/mini/*.js"
          BROWSER="--browser ${{ matrix.browser }}"
          npm run test -- "${ENV}" "${SPEC}" "${BROWSER}"
        working-directory: ./test/e2e

  e2e-test-all-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    needs: check_bot
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: docker-compose -f staging.docker-compose.yml build
      - run: docker-compose -f staging.docker-compose.yml up -d
      - run: |
          FILE_PATH="**/test/e2e/package-lock.json"
          echo "FILE_PATH=${FILE_PATH}" >> "${GITHUB_ENV}"
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles(env.FILE_PATH) }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: |
          ENV="API_HOST=http://localhost:8080/"
          npm run test -- --env "${ENV}" --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-mini-prd:
    runs-on: ubuntu-latest
    needs:
      - deploy-app-engine
      - e2e-test-mini-docker-compose
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    steps:
      - uses: actions/checkout@v2
      - run: |
          FILE_PATH="**/test/e2e/package-lock.json"
          echo "FILE_PATH=${FILE_PATH}" >> "${GITHUB_ENV}"
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles(env.FILE_PATH) }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: |
          ENV="--env API_HOST="
          ENV+="https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com"
          SPEC="--spec cypress/integration/mini/*.js"
          BROWSER="--browser ${{ matrix.browser }}"
          npm run test -- "${ENV}" "${SPEC}" "${BROWSER}"
        working-directory: ./test/e2e

  e2e-test-all-prd:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-docker-compose
      - e2e-test-mini-prd
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          FILE_PATH="**/test/e2e/package-lock.json"
          echo "FILE_PATH=${FILE_PATH}" >> "${GITHUB_ENV}"
      - name: Cache node modules e2e
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-cache-test-e2e-${{ hashFiles(env.FILE_PATH) }}
          restore-keys: |
            npm-cache-test-e2e-
      - run: npm i
        working-directory: ./test/e2e
      - run: |
          ENV="API_HOST="
          ENV+="https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com"
          npm run test -- --env "${ENV}" --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  docker-compose-build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      packages: write
    needs: check_bot
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: |
          VALUE="--build-arg BUILDKIT_INLINE_CACHE=1"
          docker-compose -f staging.docker-compose.yml build ${VALUE}
      - run: docker-compose -f staging.docker-compose.yml push

  migrating-traffic:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-prd
    if: ${{ github.event_name == 'push' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: google-github-actions/setup-gcloud@v0.4.0
        with:
          project_id: 'hato-atama'
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.5.0
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/765091727073/locations/global/workloadIdentityPools/hato-atama-workload-identity/providers/github'
          service_account: 'actions-deploy@hato-atama.iam.gserviceaccount.com'
      - run: |
          FILE_PATH="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth login --brief --cred-file="${FILE_PATH}"
      - run: |
          VALUE="v${GITHUB_RUN_NUMBER}=1"
          gcloud app services set-traffic default --splits "${VALUE}"

  remove-app-engine-past-versions:
    runs-on: ubuntu-latest
    needs:
      - migrating-traffic
    if: ${{ github.event_name == 'push' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get run numbers
        uses: actions/github-script@v5
        id: get_run_numbers
        env:
          HEAD_REF: master
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const running = 'running'
            const retry_count = 10
            let result

            for (let i = 0; i < retry_count; i++) {
              console.log("call actions.listRepoWorkflows:", common_params)
              let workflows = await github.paginate(
                                  github.rest.actions.listRepoWorkflows,
                                  common_params
                              )
              workflows = workflows.filter(w => w.name === 'release')
              const run_numbers = await Promise.all(workflows.map(async w => {
                const list_workflow_runs_params = {
                  workflow_id: w.id,
                  branch: HEAD_REF,
                  ...common_params
                }
                console.log("call actions.listWorkflowRuns:")
                console.log(list_workflow_runs_params)
                let runs = await github.paginate(
                               github.rest.actions.listWorkflowRuns,
                               list_workflow_runs_params
                           )
                runs = runs.filter(r => r.run_number < ${{github.run_number}})
                return runs.map(r => {
                  if (r.status !== 'completed') {
                    return running
                  }

                  return `v${r.run_number}`
                })
              }))
              result = run_numbers.flat().filter(Boolean)
              result.shift()

              if (!result.includes(running) || i === retry_count - 1) {
                break
              }

              // 完了していないrunがあった場合はリトライ
              // sleepする時間は exponential backoff and jitter で算出している
              // 参考: https://aws.typepad.com/sajp/2015/03/backoff.html
              const sleep_seconds = Math.random() * (Math.pow(2, i + 1) * 100)
              console.log(`sleep ${sleep_seconds}s`)
              await new Promise(r => setTimeout(r, sleep_seconds * 1000))
            }

            if (result.includes(running)) {
              core.setFailed('There are running runs.')
            }

            return result.join(' ')
      - uses: google-github-actions/setup-gcloud@v0.4.0
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        with:
          project_id: 'hato-atama'
      - id: 'auth'
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.5.0
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/765091727073/locations/global/workloadIdentityPools/hato-atama-workload-identity/providers/github'
          service_account: 'actions-deploy@hato-atama.iam.gserviceaccount.com'
      - run: |
          FILE_PATH="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth login --brief --cred-file="${FILE_PATH}"
      - name: Remove app engine versions
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        run: |
          NUMBER="${{steps.get_run_numbers.outputs.result}}"
          gcloud app versions delete --service=default "${NUMBER}"

  pr-test-complete-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - create-pr-environment
      - e2e-test-mini-prd
      - e2e-test-all-docker-compose
      - docker-compose-build
      - lighthouse
    steps:
      - run: exit 0

  pr-test-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs:
      - pr-test-complete-check
    steps:
      - if: ${{ needs.pr-test-complete-check.result == 'success' }}
        run: exit 0
      - if: ${{ needs.pr-test-complete-check.result != 'success' }}
        run: exit 1

  release-complete-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - remove-app-engine-past-versions
      - docker-compose-build
      - lighthouse
    steps:
      - run: exit 0

  release-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'push' }}
    needs:
      - release-complete-check
    steps:
      - if: ${{ needs.release-complete-check.result == 'success' }}
        run: exit 0
      - if: ${{ needs.release-complete-check.result != 'success' }}
        run: exit 1
