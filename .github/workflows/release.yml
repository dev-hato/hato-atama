---
name: release

on:
  push:
    branches:
      - master
  pull_request:

env:
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/765091727073/locations/global/workloadIdentityPools/hato-atama-workload-identity/providers/github'
  GCP_SERVICE_ACCOUNT: 'actions-deploy@hato-atama.iam.gserviceaccount.com'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: frontend/.node-version
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      # https://github.com/elm/compiler/blob/24d3a89469e75cf7aa579442ecaf5ddfdd192ab2/installers/linux/README.md
      - name: Install Elm
        run: |
          elm_version="$(grep elm-version elm.json | sed -e 's/ *"elm-version": "\(.*\)",$/\1/g')"
          curl -L -o elm.gz "https://github.com/elm/compiler/releases/download/${elm_version}/binary-for-linux-64-bit.gz"
          gunzip elm.gz
          chmod +x elm
          mv elm /usr/local/bin/
      - run: npm ci --prefer-offline
      - name: build
        run: npm run build
      - uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: frontend/dist

  deploy-app-engine:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.event_name == 'push' || (github.repository == github.event.pull_request.head.repo.full_name && github.repository == 'dev-hato/hato-atama')
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: frontend
          path: frontend/dist
      - run: |
          echo -e "env_variables:\n" >> app.yaml
          echo -e "  ENV_NAME: \"v${GITHUB_RUN_NUMBER}\"" >> app.yaml
        if: ${{ github.event_name == 'pull_request' }}
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"prd\"" >> app.yaml'
        if: ${{ github.event_name == 'push' }}
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.7.3
        with:
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{env.GCP_SERVICE_ACCOUNT}}
      - uses: google-github-actions/setup-gcloud@v0.6.0
      - name: Deploy to App Engine
        uses: google-github-actions/deploy-appengine@v0.8.0
        with:
          deliverables: app.yaml
          project_id: hato-atama
          promote: false
          version: "v${{github.run_number}}"
      - name: Wait for the deployment to complete
        run: |
          # 最大10分待つ
          for i in $(seq 600); do
            serving_status=$(gcloud app versions describe \
                                                 "v${{github.run_number}}" \
                                                 --service "default" \
                                                 --format \
                                                   "value(servingStatus)")
            echo "${i}: servingStatus: ${serving_status}"
          
            if [ "${serving_status}" = "SERVING" ]; then
              exit 0
            fi
          
            sleep 1
          done
          
          exit 1


  create-pr-environment:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    permissions:
      pull-requests: write
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{github.event.pull_request.head.sha}} のPR用環境:"
            body += " <a href=\"https://v" + process.env.GITHUB_RUN_NUMBER
            body += "-dot-hato-atama.an.r.appspot.com\">サイト</a>,"
            body += " <a href=\"https://console.cloud.google.com/logs/query;"
            body += "query=resource.type%3D%22gae_app"
            body += "%22%20resource.labels.module_id%3D%22default"
            body += "%22%20resource.labels.version_id%3D%22v"
            body += process.env.GITHUB_RUN_NUMBER
            body += "%22?project=hato-atama\">ログ</a>"
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            })

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - run: |
          ARTIFACT_PATH="${{ github.workspace }}/tmp/artifacts"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> "$GITHUB_ENV"
          URLS="https://"
          URLS+="v${{ github.run_number }}-dot-hato-atama.an.r.appspot.com"
          echo "URLS=${URLS}" >> "${GITHUB_ENV}"
      - run: mkdir -p "${ARTIFACT_PATH}"
      - uses: foo-software/lighthouse-check-action@v8.0.1
        with:
          gitHubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          urls: ${{ env.URLS }}
          outputDirectory: ${{ env.ARTIFACT_PATH }}
      - uses: actions/upload-artifact@v3
        with:
          name: Lighthouse reports
          path: ${{ env.ARTIFACT_PATH }}

  docker-compose-build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        env:
          DOCKER_CONTENT_TRUST: 1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - name: Build and push
        uses: docker/bake-action@v2.0.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          pull: true
          files: |
            dev.docker-compose.yml
            staging.docker-compose.yml

  format-go:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    if: github.event_name == 'pull_request' && github.base_ref == 'master'
    permissions:
      contents: write
      pull-requests: write
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker compose -f dev.docker-compose.yml pull
      - name: Get Go version
        id: get_go_version
        run: |
          CMD="go version | awk '{print \$3}' | sed -e 's/^go//g'"
          go_version=$(docker compose -f dev.docker-compose.yml run server-dev sh -c "${CMD}")
          echo "Go version:" "${go_version}"
          echo "::set-output name=go_version::${go_version}"
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{steps.get_go_version.outputs.go_version}}
      - name: Install goimports
        run: |
          echo "$(go env GOPATH)/bin" >> "${GITHUB_PATH}"
          go install golang.org/x/tools/cmd/goimports@latest
      - name: Format files
        run: |
          go_version=$(grep runtime app.yaml | sed -e 's/runtime: go\([0-9]\)\([0-9]*\)/\1.\2/g')
          go mod tidy -go="${go_version}"
          goimports -l -w .
      # 差分があったときは差分を出力する
      - name: Show diff
        id: diff
        run: |
          result=$(git diff)
          echo "::set-output name=result::$result"
      - run: |
          REPO_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
      # 差分があったときは、コミットを作りpushする
      - name: Push
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        run: |
          git config user.name "github-actions[bot]"
          EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git config user.email "${EMAIL}"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          REPO_URL="https://"
          REPO_URL+="${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/"
          REPO_URL+="${{github.repository}}.git"
          GITHUB_HEAD="HEAD:refs/heads/fix-format-${HEAD_REF}"
          git push -f "${REPO_URL}" "${GITHUB_HEAD}"
      - name: Set org name
        uses: actions/github-script@v6
        if: env.REPO_NAME == github.repository
        id: set_org_name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: return process.env.GITHUB_REPOSITORY.split('/')[0]
      - name: Get PullRequests
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-format-" + HEAD_REF,
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const number = "#${{github.event.pull_request.number}}"
            let title = "formatが間違ってたので直してあげたよ！PRをマージしてね！ "
            title += number
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-format-" + HEAD_REF,
              base: HEAD_REF,
              title,
              body: "鳩の唐揚げおいしい！😋😋😋 " + number
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = await github.rest.pulls.create(
                                      pulls_create_params
                                    )
            return create_pull_res.data.number
      - name: Assign a user
        uses: actions/github-script@v6
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0
          && github.event.pull_request.user.login != 'dependabot[bot]' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_add_assignees_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{steps.create_pull_request.outputs.result}},
              assignees: ["${{github.event.pull_request.user.login}}"]
            }
            console.log("call issues.addAssignees:")
            console.log(issues_add_assignees_params)
            await github.rest.issues.addAssignees(issues_add_assignees_params)
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result == '' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const head_name = "fix-format-" + HEAD_REF
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "${{steps.set_org_name.outputs.result}}:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)

            for (const pull of pulls) {
              const pulls_update_params = {
                pull_number: pull.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:", pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.diff.outputs.result != '' }}
        run: exit 1

  # npm installを実行し、package.jsonやpackage-lock.jsonに差分があればPRを作る
  update-package:
    runs-on: ubuntu-latest
    needs: update-version
    strategy:
      matrix:
        directory: ['frontend', 'test/e2e', '.']
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get branch name
        id: get_branch_name
        run: |
          BRANCH_NAME="$(echo '${{ matrix.directory }}' | sed -e 's:/:-:g')"
          BRANCH_NAME="${BRANCH_NAME//\./root}"
          echo "::set-output name=branch_name::${BRANCH_NAME}"
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: ${{ matrix.directory }}/.node-version
          cache: npm
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json
      - run: npm install
      - if: matrix.directory == 'frontend'
        run: npx browserslist@latest --update-db
      # 差分があったときは差分を出力する
      - name: Show diff
        id: diff
        run: |
          result=$(git diff)
          echo "::set-output name=result::$result"
      - run: |
          REPO_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
      # 差分があったときは、コミットを作りpushする
      - name: Push
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        run: |
          git config user.name "github-actions[bot]"
          EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git config user.email "${EMAIL}"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          REPO_URL="https://"
          REPO_URL+="${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/"
          REPO_URL+="${{github.repository}}.git"
          GITHUB_HEAD="HEAD:refs/heads/fix-package-"
          GITHUB_HEAD+="${{ steps.get_branch_name.outputs.branch_name }}-"
          GITHUB_HEAD+="${HEAD_REF}"
          git push -f "${REPO_URL}" "${GITHUB_HEAD}"
      - name: Set org name
        uses: actions/github-script@v6
        if: env.REPO_NAME == github.repository
        id: set_org_name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: return process.env.GITHUB_REPOSITORY.split('/')[0]
      - name: Get PullRequests
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            let head = "${{steps.set_org_name.outputs.result}}:fix-package-"
            head += "${{ steps.get_branch_name.outputs.branch_name }}-"
            head += HEAD_REF
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head,
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            let head = "${{steps.set_org_name.outputs.result}}:fix-package-"
            head += "${{ steps.get_branch_name.outputs.branch_name }}-"
            head += HEAD_REF
            const number = "#${{github.event.pull_request.number}}"
            let title = "${{ matrix.directory }}の"
            title += "package.jsonやpackage-lock.jsonを直してあげたよ！PRをマージしてね！ "
            title += number
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head,
              base: HEAD_REF,
              title,
              body: "鳩の唐揚げおいしい！😋😋😋 " + number
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = await github.rest.pulls.create(
                                      pulls_create_params
                                    )
            return create_pull_res.data.number
      - name: Assign a user
        uses: actions/github-script@v6
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0
          && github.event.pull_request.user.login != 'dependabot[bot]' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_add_assignees_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{steps.create_pull_request.outputs.result}},
              assignees: ["${{github.event.pull_request.user.login}}"]
            }
            console.log("call issues.addAssignees:")
            console.log(issues_add_assignees_params)
            await github.rest.issues.addAssignees(issues_add_assignees_params)
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result == '' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            let head_name = "fix-package-"
            head_name += "${{ steps.get_branch_name.outputs.branch_name }}-"
            head_name += HEAD_REF
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "${{steps.set_org_name.outputs.result}}:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:",pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)

            for (const pull of pulls) {
              const pulls_update_params = {
                pull_number: pull.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:")
              console.log(pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.diff.outputs.result != '' }}
        run: exit 1

  # .node-version や package.json のNode.js・npmのバージョンをDockerイメージと同期させる
  update-version:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get Dependabot Node.js version
        id: get_dependabot_node_version
        run: |
          DOCKER_CMD="node --version && npm --version"
          mapfile -t result < <(docker run ghcr.io/dependabot/dependabot-core sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          npm_version=${result[1]}
          echo "Node.js version:" "${node_version}"
          echo "npm version:" "${npm_version}"
          echo "::set-output name=node_version::${node_version}"
          echo "::set-output name=npm_version::${npm_version}"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker compose -f dev.docker-compose.yml pull
        env:
          DOCKER_CONTENT_TRUST: 1
      - name: Get Node.js version
        id: get_node_version
        env:
          DOCKER_CONTENT_TRUST: 1
        run: |
          DOCKER_CMD="node --version && npm --version"
          mapfile -t result < <(docker compose -f dev.docker-compose.yml run frontend-dev sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          npm_version=${result[1]}
          echo "Node.js version:" "${node_version}"
          echo "npm version:" "${npm_version}"
          echo "::set-output name=node_version::${node_version}"
          echo "::set-output name=npm_version::${npm_version}"
      - name: Update versions
        run: |
          DEPENDABOT_NODE_VERSION="${{steps.get_dependabot_node_version.outputs.node_version}}"
          DEPENDABOT_NPM_VERSION="${{steps.get_dependabot_node_version.outputs.npm_version}}"
          NODE_VERSION="${{steps.get_node_version.outputs.node_version}}"
          NPM_VERSION="${{steps.get_node_version.outputs.npm_version}}"
          for path in "frontend" "test/e2e" "."; do
            echo "${NODE_VERSION}" > ${path}/.node-version

            NODE_PATTERN="s/\"node\": \".*\"/\"node\": \"^${DEPENDABOT_NODE_VERSION}"

            if [ "${DEPENDABOT_NODE_VERSION}" != "${NODE_VERSION}" ]
            then
              NODE_PATTERN+=" || ^${NODE_VERSION}"
            fi

            NODE_PATTERN+="\"/g"
            sed -i -e "${NODE_PATTERN}" ${path}/package.json

            NPM_PATTERN="s/\"npm\": \".*\"/\"npm\": \"^${DEPENDABOT_NPM_VERSION}"

            if [ "${DEPENDABOT_NPM_VERSION}" != "${NPM_VERSION}" ]
            then
              NPM_PATTERN+=" || ^${NPM_VERSION}"
            fi

            NPM_PATTERN+="\"/g"
            sed -i -e "${NPM_PATTERN}" ${path}/package.json
          done
      # 差分があったときは差分を出力する
      - name: Show diff
        id: diff
        run: |
          result=$(git diff)
          echo "::set-output name=result::$result"
      - run: |
          REPO_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
      # 差分があったときは、コミットを作りpushする
      - name: Push
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        run: |
          git config user.name "github-actions[bot]"
          EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git config user.email "${EMAIL}"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          REPO_URL="https://"
          REPO_URL+="${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/"
          REPO_URL+="${{github.repository}}.git"
          GITHUB_HEAD="HEAD:refs/heads/fix-version-${HEAD_REF}"
          git push -f "${REPO_URL}" "${GITHUB_HEAD}"
      - name: Set org name
        uses: actions/github-script@v6
        if: env.REPO_NAME == github.repository
        id: set_org_name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: return process.env.GITHUB_REPOSITORY.split('/')[0]
      - name: Get PullRequests
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-version-" + HEAD_REF,
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const number = "#${{github.event.pull_request.number}}"
            let title = "nodeのバージョンを直してあげたよ！PRをマージしてね！ "
            title += number
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-version-" + HEAD_REF,
              base: HEAD_REF,
              title,
              body: "鳩の唐揚げおいしい！😋😋😋 " + number
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = await github.rest.pulls.create(
                                      pulls_create_params
                                    )
            return create_pull_res.data.number
      - name: Assign a user
        uses: actions/github-script@v6
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0
          && github.event.pull_request.user.login != 'dependabot[bot]' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_add_assignees_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{steps.create_pull_request.outputs.result}},
              assignees: ["${{github.event.pull_request.user.login}}"]
            }
            console.log("call issues.addAssignees:")
            console.log(issues_add_assignees_params)
            await github.rest.issues.addAssignees(issues_add_assignees_params)
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result == '' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const head_name = "fix-version-" + HEAD_REF
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "${{steps.set_org_name.outputs.result}}:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)

            for (const pull of pulls) {
              const pulls_update_params = {
                pull_number: pull.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:", pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.diff.outputs.result != '' }}
        run: exit 1

  dockle:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    if: github.event_name == 'pull_request' && github.base_ref == 'master'
    strategy:
      matrix:
        docker_compose_file_name: ["dev.docker-compose.yml", "staging.docker-compose.yml"]
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: |
          VERSION=$(
            curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
          )
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb
      - run: docker compose -f ${{matrix.docker_compose_file_name}} pull
      - run: docker compose -f ${{matrix.docker_compose_file_name}} up -d
      - run: |
          for image_name in $(docker compose -f ${{matrix.docker_compose_file_name}} images | awk 'OFS=":" {print $2,$3}' | tail -n +2); do
            cmd="dockle --exit-code 1 "

            if [[ "${image_name}" =~ "gcloud_datastore" ]]; then
              cmd+="-af settings.py -i CIS-DI-0001 "
            elif [[ "${image_name}" =~ "server-dev" ]]; then
              cmd+="-af credentials "
            fi

            cmd+="${image_name}"
            echo "> ${cmd}"
            eval "${cmd}"
          done

  e2e-test-mini-docker-compose:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker-compose -f staging.docker-compose.yml pull
      - run: docker-compose -f staging.docker-compose.yml up -d
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: test/e2e/.node-version
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json
      - run: npm ci --prefer-offline
        working-directory: ./test/e2e
      - run: |
          npm run test -- --env API_HOST=http://localhost:8080/ \
                          --spec cypress/integration/mini/*.js \
                          --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-all-docker-compose:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker-compose -f staging.docker-compose.yml pull
      - run: docker-compose -f staging.docker-compose.yml up -d
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: test/e2e/.node-version
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json
      - run: npm ci --prefer-offline
        working-directory: ./test/e2e
      - run: |
          ENV="API_HOST=http://localhost:8080/"
          npm run test -- --env "${ENV}" --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-mini-prd:
    runs-on: ubuntu-latest
    needs:
      - deploy-app-engine
      - e2e-test-mini-docker-compose
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: test/e2e/.node-version
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json
      - run: npm ci --prefer-offline
        working-directory: ./test/e2e
      - run: |
          API_HOST="https://"
          API_HOST+="v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com"
          npm run test -- --env "API_HOST=${API_HOST}" \
                          --spec cypress/integration/mini/*.js \
                          --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  e2e-test-all-prd:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-docker-compose
      - e2e-test-mini-prd
    strategy:
      matrix:
        browser: ["chrome", "chromium", "firefox", "electron"]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.2.0
        with:
          node-version-file: test/e2e/.node-version
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json
      - run: npm ci --prefer-offline
        working-directory: ./test/e2e
      - run: |
          ENV="API_HOST="
          ENV+="https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com"
          npm run test -- --env "${ENV}" --browser ${{ matrix.browser }}
        working-directory: ./test/e2e

  migrating-traffic:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-prd
    if: ${{ github.event_name == 'push' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.7.3
        with:
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{env.GCP_SERVICE_ACCOUNT}}
      - uses: google-github-actions/setup-gcloud@v0.6.0
      - run: |
          VALUE="v${GITHUB_RUN_NUMBER}=1"
          gcloud app services set-traffic default --splits "${VALUE}"

  remove-app-engine-past-versions:
    runs-on: ubuntu-latest
    needs:
      - migrating-traffic
    if: ${{ github.event_name == 'push' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Get run numbers
        uses: actions/github-script@v6
        id: get_run_numbers
        env:
          HEAD_REF: master
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const running = 'running'
            const retry_count = 10
            let result

            for (let i = 0; i < retry_count; i++) {
              console.log("call actions.listRepoWorkflows:", common_params)
              let workflows = await github.paginate(
                                github.rest.actions.listRepoWorkflows,
                                common_params
                              )
              workflows = workflows.filter(w => w.name === 'release')
              const run_numbers = await Promise.all(workflows.map(async w => {
                const list_workflow_runs_params = {
                  workflow_id: w.id,
                  branch: HEAD_REF,
                  ...common_params
                }
                console.log("call actions.listWorkflowRuns:")
                console.log(list_workflow_runs_params)
                let runs = await github.paginate(
                             github.rest.actions.listWorkflowRuns,
                             list_workflow_runs_params
                           )
                runs = runs.filter(r => r.run_number < ${{github.run_number}})
                return runs.map(r => {
                  if (r.status !== 'completed') {
                    return running
                  }

                  return `v${r.run_number}`
                })
              }))
              result = run_numbers.flat().filter(Boolean)
              result.shift()

              if (!result.includes(running) || i === retry_count - 1) {
                break
              }

              // 完了していないrunがあった場合はリトライ
              // sleepする時間は exponential backoff and jitter で算出している
              // 参考: https://aws.typepad.com/sajp/2015/03/backoff.html
              const sleep_seconds = Math.random() * (Math.pow(2, i + 1) * 100)
              console.log(`sleep ${sleep_seconds}s`)
              await new Promise(r => setTimeout(r, sleep_seconds * 1000))
            }

            if (result.includes(running)) {
              core.setFailed('There are running runs.')
            }

            return result.join(' ')
      - id: 'auth'
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v0.7.3
        with:
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{env.GCP_SERVICE_ACCOUNT}}
      - uses: google-github-actions/setup-gcloud@v0.6.0
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
      - name: Remove app engine versions
        if: ${{ steps.get_run_numbers.outputs.result != '' }}
        run: |
          gcloud app versions delete --service=default \
                                     ${{steps.get_run_numbers.outputs.result}}

  # deploy-app-engineに依存しているjobが完了したか
  pr-test-complete-check-deploy-app-engine:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - create-pr-environment
      - e2e-test-mini-prd
      - lighthouse
    steps:
      - run: exit 0

  # forkしたリポジトリからdev-hato/hato-atamaへPRを出した場合やforkしたリポジトリ上でPRを立てた場合はdeploy-app-engineがskipされていても完了したものと見なす
  pr-test-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs:
      - e2e-test-all-docker-compose
      - pr-test-complete-check-deploy-app-engine
    steps:
      - if: ${{ needs.e2e-test-all-docker-compose.result == 'success' && (github.repository != github.event.pull_request.head.repo.full_name || github.repository != 'dev-hato/hato-atama' || needs.pr-test-complete-check-deploy-app-engine.result == 'success') }}
        run: exit 0
      - if: ${{ needs.e2e-test-all-docker-compose.result != 'success' || (github.repository == github.event.pull_request.head.repo.full_name && github.repository == 'dev-hato/hato-atama' && needs.pr-test-complete-check-deploy-app-engine.result != 'success') }}
        run: exit 1

  release-complete-check:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - remove-app-engine-past-versions
      - lighthouse
    steps:
      - run: exit 0

  release-complete:
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'push' }}
    needs:
      - release-complete-check
    steps:
      - if: ${{ needs.release-complete-check.result == 'success' }}
        run: exit 0
      - if: ${{ needs.release-complete-check.result != 'success' }}
        run: exit 1
