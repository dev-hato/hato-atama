name: release

on:
  push:
    branches:
      - master
  pull_request:

env:
  DOCKER_COMPOSE_IMAGE_CACHE_DIR: /tmp/cache/docker-compose-image

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v2
      - name: Get Node.js version
        id: get_node_version
        run: |
          image_name=hato_atama_frontend_build
          docker build -t ${image_name} --target build -f Dockerfile ..
          node_version=$(docker run ${image_name} sh -c "node --version | sed -e 's/^v//g'")
          echo "Node.js version:" ${node_version}
          echo "::set-output name=node_version::${node_version}"
      - uses: actions/setup-node@v2
        with:
          node-version: ${{steps.get_node_version.outputs.node_version}}
      - name: npm install
        run: npm install
      - name: build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: frontend/dist

  deploy-app-engine:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - uses: actions/download-artifact@v2
        with:
          name: frontend
          path: frontend/dist
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"v${GITHUB_RUN_NUMBER}\"" >> app.yaml'
        if: github.event_name == 'pull_request'
      - run: 'echo -e "env_variables:\n  ENV_NAME: \"prd\"" >> app.yaml'
        if: github.event_name == 'push'
      - run: gcloud app deploy --quiet --no-promote -v v${GITHUB_RUN_NUMBER}

  create-pr-environment:
    runs-on: ubuntu-latest
    needs: deploy-app-engine
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v4.0.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "${{github.event.pull_request.head.sha}} のPR用環境: <a href=\"https://v" + process.env.GITHUB_RUN_NUMBER + "-dot-hato-atama.an.r.appspot.com\">サイト</a>, <a href=\"https://console.cloud.google.com/logs/query;query=resource.type%3D%22gae_app%22%20resource.labels.module_id%3D%22default%22%20resource.labels.version_id%3D%22v" + process.env.GITHUB_RUN_NUMBER + "%22?project=hato-atama\">ログ</a>"
            })

  e2e-test-mini-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - uses: actions/checkout@v2
      - name: Cache docker image
        id: cache-docker-image
        uses: actions/cache@v2
        with:
          path: ${{ env.DOCKER_COMPOSE_IMAGE_CACHE_DIR }}
          key: docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-${{ hashFiles('**/Dockerfile') }}-${{ hashFiles('**.go', '**.js', '**.json', '**.elm', '**.html') }}
          restore-keys: |
            docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-${{ hashFiles('**/Dockerfile') }}-
            docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-
            docker-compose-cache-
      - name: Docker Load gcloud_datastore
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar
      - name: Docker Load server
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar
      - name: Docker Load frontend
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar
      - run: docker-compose -f staging.docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1
      - run: docker-compose -f staging.docker-compose.yml up -d
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=http://localhost:8080/ --spec cypress/integration/mini/*.js
        working-directory: ./test/e2e
      - name: Docker tag and save
        id: docker-tag-save
        run: mkdir -p ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}
          && docker image tag hato-atama-staging-docker-compose-gcloud_datastore hato-atama-staging-docker-compose-cache-gcloud_datastore
          && docker image tag hato-atama-staging-docker-compose-server hato-atama-staging-docker-compose-cache-server
          && docker image tag hato-atama-staging-docker-compose-frontend hato-atama-staging-docker-compose-cache-frontend
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar hato-atama-staging-docker-compose-cache-gcloud_datastore
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar hato-atama-staging-docker-compose-cache-server
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar hato-atama-staging-docker-compose-cache-frontend

  e2e-test-all-docker-compose:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - uses: actions/checkout@v2
      - name: Cache docker image
        id: cache-docker-image
        uses: actions/cache@v2
        with:
          path: ${{ env.DOCKER_COMPOSE_IMAGE_CACHE_DIR }}
          key: docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-${{ hashFiles('**/Dockerfile') }}-${{ hashFiles('**.go', '**.js', '**.json', '**.elm', '**.html') }}
          restore-keys: |
            docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-${{ hashFiles('**/Dockerfile') }}-
            docker-compose-cache-${{ hashFiles('staging.docker-compose.yml') }}-
            docker-compose-cache-
      - name: Docker Load gcloud_datastore
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar
      - name: Docker Load server
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar
      - name: Docker Load frontend
        if: ${{ hashFiles("${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar") != '' }}
        run:
          docker image load -i ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar
      - run: docker-compose -f staging.docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1
      - run: docker-compose -f staging.docker-compose.yml up -d
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=http://localhost:8080/
        working-directory: ./test/e2e
      - name: Docker tag and save
        id: docker-tag-save
        run: mkdir -p ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}
          && docker image tag hato-atama-staging-docker-compose-gcloud_datastore hato-atama-staging-docker-compose-cache-gcloud_datastore
          && docker image tag hato-atama-staging-docker-compose-server hato-atama-staging-docker-compose-cache-server
          && docker image tag hato-atama-staging-docker-compose-frontend hato-atama-staging-docker-compose-cache-frontend
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/gcloud_datastore.tar hato-atama-staging-docker-compose-cache-gcloud_datastore
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/server.tar hato-atama-staging-docker-compose-cache-server
          && docker image save -o ${DOCKER_COMPOSE_IMAGE_CACHE_DIR}/frontend.tar hato-atama-staging-docker-compose-cache-frontend


  e2e-test-mini-prd:
    runs-on: ubuntu-latest
    needs:
      - deploy-app-engine
      - e2e-test-mini-docker-compose
    steps:
      - uses: actions/checkout@v2
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com --spec cypress/integration/mini/*.js
        working-directory: ./test/e2e

  e2e-test-all-prd:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-docker-compose
      - e2e-test-mini-prd
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - run: npm i
        working-directory: ./test/e2e
      - run: npm run test -- --env API_HOST=https://v${GITHUB_RUN_NUMBER}-dot-hato-atama.an.r.appspot.com
        working-directory: ./test/e2e

  migrating-traffic:
    runs-on: ubuntu-latest
    needs:
      - e2e-test-all-prd
    if: github.event_name == 'push'
    steps:
      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - run: gcloud app services set-traffic default --splits v${GITHUB_RUN_NUMBER}=1

  pr-test-complete:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs:
      - create-pr-environment
      - e2e-test-mini-prd
      - e2e-test-all-docker-compose
    steps:
      - run: exit 0

  release-complete:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - migrating-traffic
    steps:
      - run: exit 0
